dfDadosIdade2 <- dfDados[order(dfDados$idade,decreasing = T)]
dfDadosIdade2 <- dfDados[order(dfDados$idade,decreasing = T),]
dfDadosIdade2
dfDadosNome <- dfDados[order(dfDados$nomes),]
dfDadosNome
dfDados[dfDados$nascimento < 1999,]
dfDados[dfDados$nascimento <= 1999,] # Retorna a pessoa com ano de nascimento anterior a 1999
dfDados[dfDados$genero == "F",] # Retorna as pessoas do gênero feminino
rm(list = ls())
nomes <- c("Amanda","Tobias","Lis","Jorda","Fernanda","Lucas","Fritz")
nascimento <- c(1999,1999,1998,1999,2000,1999,1999)
idade <- c(18,18,19,18,17,18,18)
genero <- c("F","M","F","M","F","M","M")
ehExatas <- c(T,T,F,T,F,F,F)
dfDados <- data.frame(nomes,nascimento,idade,genero,ehExatas)
dfDados
colunas <- c("Nomes","Nascimento","Idade","Gênero","EhExatas")
names(dfDados) <- colunas
dfDados
pessoa <- c("NLembro",1999,18,"F",T)
pessoa <- data.frame("NLembro",1999,18,"F",T)
names(pessoa) <- colunas
rbind(dfDados,pessoa)
pessoa <- data.frame("Camila",1999,18,"F",T)
names(pessoa) <- colunas
rbind(dfDados,pessoa)
nomes <- c("Amanda","Tobias","Lis","Jorda","Fernanda","Lucas","Fritz")
nascimento <- c(1999,1999,1998,1999,2000,1999,1999)
idade <- c(18,18,19,18,17,18,18)
genero <- c("F","M","F","M","F","M","M")
ehExatas <- c(T,T,F,T,F,F,F)
dfDados <- data.frame(nomes,nascimento,idade,genero,ehExatas)
dfDados
colunas <- c("Nomes","Nascimento","Idade","Gênero","EhExatas")
names(dfDados) <- colunas
dfDados
pessoa <- data.frame("Camila",1999,18,"F",T)
names(pessoa) <- colunas
rbind(dfDados,pessoa)
rm(list = ls())
nomes <- c("Amanda","Tobias","Lis","Jorda","Fernanda","Lucas","Fritz")
nascimento <- c(1999,1999,1998,1999,2000,1999,1999)
idade <- c(18,18,19,18,17,18,18)
genero <- c("F","M","F","M","F","M","M")
ehExatas <- c(T,T,F,T,F,F,F)
dfDados <- data.frame(nomes,nascimento,idade,genero,ehExatas)
dfDados
x <- dfDados$idade > 18
x
dfDados(x,c(1,3))
dfDados <- data.frame(nomes,nascimento,idade,genero,ehExatas)
dfDados
dfDados(x,c(1,3))
x <- dfDados$idade > 18
dfDados( x, c(1,3))
dfDados[ x, c(1,3)]
dfDados[x, c(1,3)]
y <- dfDados$genero == "F"
dfDados[y,c(1,4)]
dfDados[y, ]
subset(dfDados,idade == 18 & genero == "M", select = c(nomes,idade) )
vetor <- c(1:10)
matrix(1:12,ncol = 4)
rm(list = ls())
nomes <- c("Amanda","Tobias","Lis","Jorda","Fernanda","Lucas","Fritz")
nascimento <- c(1999,1999,1998,1999,2000,1999,1999)
idade <- c(18,18,19,18,17,18,18)
genero <- c("F","M","F","M","F","M","M")
ehExatas <- c(T,T,F,T,F,F,F)
dfDados <- data.frame(nomes,nascimento,idade,genero,ehExatas)
dfDados
vetor <- c(1:10)
vetor
matriz <- matrix(1:12,ncol = 4)
matriz
lista <- list(dfDados,vetor,matriz)
lista
lista[2]
lista[2,c(1,3)]
lista[2,3]
lista[2]
rm(list = ls())
vetor <- c(1:10)
i <- 0
while(i < length(vetor)){
print vetor[i]
i++
}
i <- 0
while(i < length(vetor)){
print vetor[i]
i += 1
}
i <- 0
while(i < length(vetor)){
print vetor
i += 1
}
print(vetor)
i += 1
print(vetor)
i <- i + 1
while(i < length(vetor)){
print(vetor)
i <- i + 1
}
while(i < length(vetor)){
print(vetor[i])
i <- i + 1
}
while(i < length(vetor)){
print(vetor[i])
i <- i + 1
}
i <- 0
while(i < length(vetor)){
print(vetor[i])
i <- i + 1
}
i <- 0
while(i <= length(vetor)){
print(vetor[i])
i <- i + 1
}
print(vetor[i])
for(i in 1:length(vetor)){
print(vetor[i])
}
for(i in 1:length(vetor)){
if(vetor[i] == 5){
break
}
print(vetor[i])
}
for(i in vetor){
if(i == 4){
next
}
print(vetor[i])
}
for(i in vetor){
if(i == 4){
next()
}
print(vetor[i])
}
rm(list = ls())
date() # Função padrão
d <- as.Date("2017-10-05")
d <- as.Date("05/11/2017")
d
d <- as.Date("5/11/2017")
d
date() # Função padrão
d <- as.Date("5/11/17")
d
d2 <- as.Date("3/10/17")
d2
d - d2
d2 <- as.Date("3/11/17")
d2
d - d2
format(d,format ="%y-%m-&d")
format(d,format ="%y-%m-%d")
format(d2, format = "%A de %d de %B de %Y")
format(d2, format = "%A de %d de %B de %y")
format(d2, format = "%A de %d de %B de %Y")
rm(list = ls())
vetor <- c(1:10)
max(vetor)
min(vetor)
length(vetor)
sd(vetor)
sort(vetor) # Ordena o vetor do menor para o maior
sort(vetor,decreasing = T)
sort(vetor,decreasing = T) # Ordena o vetor do maior para o menor
order(vetor)
order(vetor) # Retorna os índices de cada elemento do vetor
matrix(1:12,ncol = 4)
dim(matrix())
m <- matrix(1:12,ncol = 4)
dim(m)
cars
mean(cars)
mean(cars$speed)
attach(cars)
mean(speed)
mean(dist)
detach(cars)
detach(cars) # Desfixa o banco de dados
with(cars,mean(speed))
with(cars,mean(speed),mean(dist) # Mesmo resultado prático do attach, só que sem precisar fixar
with(cars,mean(speed),mean(dist)) # Mesmo resultado prático do attach, só que sem precisar fixar
with(cars,mean(speed)) # Mesmo resultado prático do attach, só que sem precisar fixar
a <- seq(from = 1, to = 10 , by = 2)
a
a <- seq(from = 1, to = 10 , by = 2) # Cria uma sequência de 1 até 10 com intervalo de 2 em 2
a
b <- seq(from = 1, to = 100 , by = 10)
b
b <- seq(from = 0, to = 100 , by = 10)
b
b <- seq(from = 0, to = 100 , by = 10) # Cria uma sequência de 0 até 100 com intervalo de 10 em 10
b
length(a)
length(b)
v <- scan()
v
tabela <- read.table(file.choose(), sep = ";", dec = ".", header = T)
rm(list = ls())
head(cars)
tail(cars)
head(cars,n = 4L)
summary(cars)
colnames(USArrests)
rownames(USArrests)
cumsum(AirPassengers)
apply(cars,1,mean)
apply(USPersonalExpenditure,1,mean)
apply(USPersonalExpenditure,2,mean)
apply(USPersonalExpenditure,3,mean)
apply(USPersonalExpenditure,2,mean)
USPersonalExpenditure
apply(USPersonalExpenditure,1,mean)
apply(USPersonalExpenditure,2,mean) # Retorna a média das colunas
table(infert$age,infert$induced)
sample(10)
sample(1:100,size = 10,replace = T)
sample(1:10,size = 11,replace = T)
sample(1:10,size = 10,replace = F)
set.seed(123)
sample(1:10,size = 10,replace = F)
sample(1:10,size = 10,replace = F) # Gera 10 números aleatórios no intervalo de 1 a 10 sem repetição
set.seed(123)
sample(1:10,size = 10,replace = F)
mean(rivers)
mean(cars$speed) # Retorna a média
median(cars$dist)
sd(cars$speed)
var(cars$dist)
distNorm <- rnorm(10,mean = 10,sd = 1)
distNorm
distPoi <- rpois(10,lambda = 4)
distPoi
distBi <- pbinom(c(7,9,11,15), size = 15, prob = 0.5)
distBi
shapiro.test(distNorm)
cor(women$height,women$weight)
modLn <- lm(women$height~women$weight)
modLn
plot(women$height~women$weight)
abline(modLn)
rm(listo)
rm(list = ls())
iris
dim(iris)
amostra <- sample(c(0,1),150,replace = T,prob = c(0.5,0.5))
amostra
analise <- iris[amostra,]
analise
dim(analise)
iris
dim(iris)
amostra <- sample(c(0,1),150,replace = T,prob = c(0.5,0.5))
amostra
for(i in 1:length(amostra)){
if(amostra[i] == 1){
rbind(iris[i])
}
}
for(i in 1:length(amostra)){
if(amostra[i] == 1){
rbind(iris[i,])
}
}
for(i in 1:length(amostra)){
if(amostra[i] == 1){
analise = rbind(iris[i,])
}
}
analise
analise <- []
analise <- rbind(iris[1,])
for(i in 1:length(amostra)){
if(amostra[i] == 1){
analise = rbind(iris[i,])
}
}
analise
amostra
analise <- rbind(iris[1,])
for(i in 1:length(amostra)){
if(amostra[i] == 1){
analise = rbind(analise,iris[i,])
}
}
analise
amostra <- sample(c(0,1),150,replace = T,prob = c(0.5,0.5)) # Criando um vetor aleatório de 0 e 1
amostra
for(i in 1:length(amostra)){
if(amostra[i] == 1){
analise = rbind(analise,iris[i,])
}
}
analise
typeof(analise)
is.data.frame(analise)
sort(analise)
colnome <- c("Ind","Sepal lenght","Sepal width","Petal lenght","Petal width","Species")
colnames(analise) <- colnome
colnome <- c("Sepal lenght","Sepal width","Petal lenght","Petal width","Species")
colnames(analise) <- colnome
analise
analise[1,1]
?mutate
??mutate
install.packages(rcongresso)
"rcongresso"
rcongresso
library(tidyverse)
library(readr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(cluster) # Adicionei pra plotar o kmeans
library(fpc) # Adicionei pra plotar o kmeans
setwd("/Users/amandaluna/Documents/guardiansAnalytics") # workspace Amanda
dados <- read_csv("logs.txt", col_names = c("mes", "dia_do_mes", "hora", "maquina", "status", "usuario"))
dados <- dados %>% mutate(data = paste("2017", mes, dia_do_mes, sep = "-"), dia_da_semana = wday(data, label = T))
sessoes_abertas <- dados %>% filter(status == "opened")
super <- setNames(do.call(rbind.data.frame, strsplit(sessoes_abertas$maquina, "-")), c("lab", "maquina"))
super <- sessoes_abertas %>% mutate(hora_pura = hour(sessoes_abertas$hora))
super <- super %>% mutate(turno = if_else(hora_pura %in% 05:11, "manha",
if_else(hora_pura %in% 12:17, "tarde",
if_else(hora_pura %in% 18:24, "noite", "madrugada"))))
super <- super %>% mutate(horario = if_else(hora_pura %in% 08:09, "08-10", # 14h as 16h maior pico
if_else(hora_pura %in% 10:11, "10-12",
if_else(hora_pura %in% 12:14, "12-13",
if_else(hora_pura %in% 14:15, "14-16",
if_else(hora_pura %in% 16:17, "16-18",
if_else(hora_pura %in% 18:24, "18h+", "06-08")))))))
r <- setNames(do.call(rbind.data.frame, strsplit(sessoes_abertas$maquina, "-")), c("lab", "maquina"))
super <- super %>% mutate(lab = r$lab)
lab <- super
lab<- lab %>% group_by(lab, usuario) %>% mutate(n_acessos=n()) #%>%
inner_join(lab, by='usuario')
lab
sessoes <- sessoes_abertas %>% subset(select=c("dia_da_semana", "dia_do_mes"))
freq_dia <- sessoes %>% group_by(dia_da_semana, dia_do_mes) %>% summarise(num_acessos = n())
freq_dia %>% ggplot(aes(x = dia_do_mes, y = num_acessos, fill = dia_da_semana)) + geom_bar(stat = "identity")
freq_mensal <- freq_dia %>% group_by(dia_da_semana) %>% summarise(media_acessos = mean(num_acessos)) # Os mts de lp1 não estão computados
freq_mensal %>% ggplot(aes(x = dia_da_semana, y = media_acessos)) + geom_bar(stat = "identity")
r <- setNames(do.call(rbind.data.frame, strsplit(sessoes_abertas$maquina, "-")), c("lab", "maquina"))
sessoes_abertas <- sessoes_abertas %>% mutate(lab = r$lab)
sessoes_abertas <- sessoes_abertas %>% mutate(hora_pura = hour(sessoes_abertas$hora))
sessoes_abertas <- sessoes_abertas %>% mutate(turno = if_else(hora_pura %in% 05:11, "manha",
if_else(hora_pura %in% 12:17, "tarde",
if_else(hora_pura %in% 18:24, "noite", "madrugada"))))
sessoes_abertas <- sessoes_abertas %>% mutate(horario = if_else(hora_pura %in% 08:09, "08-10", # 14h as 16h maior pico
if_else(hora_pura %in% 10:11, "10-12",
if_else(hora_pura %in% 12:13, "12-13",
if_else(hora_pura %in% 14:15, "14-16",
if_else(hora_pura %in% 16:17, "16-18",
if_else(hora_pura %in% 18:24, "18h+", "06-08")))))))
sessoes_abertas %>% ggplot(aes(x = horario)) + geom_bar() # 14h as 16h é o horário de pico
sessoes_abertas %>% ggplot(aes(x = lab)) + geom_bar()
sessoes_abertas %>% ggplot(aes(x = turno)) + geom_bar()
sessoes_abertas %>% ggplot(aes(x = hora_pura)) + geom_bar() # ao contrario do que se esperava,
lcc2_acesso <- sessoes_abertas %>% filter(lab == "lcc2")
lcc2_acesso %>% ggplot(aes(x = hora_pura)) + geom_bar()
lcc1_acesso <- sessoes_abertas %>% filter(lab == "lcc1")
lcc1_acesso %>% ggplot(aes(x = hora_pura)) + geom_bar() # maior quantudade de acesso as 14 hrs
lcc1_acesso %>% ggplot(aes(x = dia_da_semana)) + geom_bar()
sessoes_por_usuario <- sessoes_abertas %>% subset(select=c("usuario"))
acessos_usuarios <- sessoes_abertas %>% group_by(usuario) %>% summarise(num_acessos = n())
acessos_usuarios <- acessos_usuarios[order(acessos_usuarios$num_acessos,decreasing = T),]
sessoes_por_maquina <- sessoes_abertas %>% subset(select=c("maquina"))
acessos_maquinas <- sessoes_por_maquina %>% group_by(maquina) %>% summarise(num_acessos = n())
acessos_maquinas <- acessos_maquinas[order(acessos_maquinas$num_acessos,decreasing = T),] # As do começo do lcc2
teste <- super %>% subset(select = c("usuario","lab"))# Seleciona apenas os atributos que me interessam
teste <- teste %>% group_by(usuario,lab) %>% summarise(num_acessos = n()) # Sumarizo os acessos
a <- teste %>% filter(lab == "lcc1") # Filtro de acordo com o meu interesse
names(a)[3] <- c("lcc1") # Nomeio a coluna
a <- a[,-2] # Retiro a coluna que não me interessa
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario") # Agrupo com o dataframe principal
acessos_usuarios[,3][is.na(acessos_usuarios[,3])] <- 0 # Onde tiver NA coloco 0
teste <- super %>% subset(select = c("usuario","lab"))
teste <- teste %>% group_by(usuario,lab) %>% summarise(num_acessos = n())
a <- teste %>% filter(lab == "lcc2")
names(a)[3] <- c("lcc2")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,4][is.na(acessos_usuarios[,4])] <- 0
teste <- super %>% subset(select = c("usuario","dia_da_semana"))
teste <- teste %>% group_by(usuario,dia_da_semana) %>% summarise(num_acessos = n())
a <- teste %>% filter(dia_da_semana == "Mon")
names(a)[3] <- c("Mon")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,5][is.na(acessos_usuarios[,5])] <- 0
teste <- super %>% subset(select = c("usuario","dia_da_semana"))
teste <- teste %>% group_by(usuario,dia_da_semana) %>% summarise(num_acessos = n())
a <- teste %>% filter(dia_da_semana == "Tues")
names(a)[3] <- c("Tues")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,6][is.na(acessos_usuarios[,6])] <- 0
teste <- super %>% subset(select = c("usuario","dia_da_semana"))
teste <- teste %>% group_by(usuario,dia_da_semana) %>% summarise(num_acessos = n())
a <- teste %>% filter(dia_da_semana == "Wed")
names(a)[3] <- c("Wed")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,7][is.na(acessos_usuarios[,7])] <- 0
teste <- super %>% subset(select = c("usuario","dia_da_semana"))
teste <- teste %>% group_by(usuario,dia_da_semana) %>% summarise(num_acessos = n())
a <- teste %>% filter(dia_da_semana == "Thurs")
names(a)[3] <- c("Thurs")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,8][is.na(acessos_usuarios[,8])] <- 0
teste <- super %>% subset(select = c("usuario","dia_da_semana"))
teste <- teste %>% group_by(usuario,dia_da_semana) %>% summarise(num_acessos = n())
a <- teste %>% filter(dia_da_semana == "Fri")
names(a)[3] <- c("Fri")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,9][is.na(acessos_usuarios[,9])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "06-08")
names(a)[3] <- c("6h-8h")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,10][is.na(acessos_usuarios[,10])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "08-10")
names(a)[3] <- c("8h-10h")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,11][is.na(acessos_usuarios[,11])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "10-12")
names(a)[3] <- c("10h-12h")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,12][is.na(acessos_usuarios[,12])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "12-13")
names(a)[3] <- c("12h-14h")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,13][is.na(acessos_usuarios[,13])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "14-16")
names(a)[3] <- c("14h-16h")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,14][is.na(acessos_usuarios[,14])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "16-18")
names(a)[3] <- c("16h-18h")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,15][is.na(acessos_usuarios[,15])] <- 0
teste <- super %>% subset(select = c("usuario","horario"))
teste <- teste %>% group_by(usuario,horario) %>% summarise(num_acessos = n())
a <- teste %>% filter(horario == "18h+")
names(a)[3] <- c("18h+")
a <- a[,-2]
acessos_usuarios <- full_join(acessos_usuarios,a, by = "usuario")
acessos_usuarios[,16][is.na(acessos_usuarios[,16])] <- 0
teste <- super %>% subset(select = c("usuario","maquina"))
teste <- teste %>% group_by(usuario) %>% summarise(num_acessos = n())
names(teste)[2] <- c("acesso__por_maquina")
acessos_usuarios <- full_join(acessos_usuarios,teste, by = "usuario")
dataKmeans <- acessos_usuarios %>% subset(select = c("num_acessos","6h-8h","8h-10h","10h-12h","12h-14h","14h-16h","16h-18h","18h+")) # filtrando para apenas número de acessos e horários
distancia = as.matrix(dist(dataKmeans)) # Matriz de dissimilaridade
clus <- kmeans(dataKmeans,centers = 2)
sil1 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 2 centros
clus <- kmeans(dataKmeans,centers = 3)
sil2 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 3 centros
clus <- kmeans(dataKmeans,centers = 4)
sil3 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 4 centros
clus <- kmeans(dataKmeans,centers = 5)
sil4 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 5 centros
clus <- kmeans(dataKmeans,centers = 6)
sil5 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 6 centros
clus <- kmeans(dataKmeans,centers = 7)
sil6 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 7 centros
clus <- kmeans(dataKmeans,centers = 8)
sil7 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 8 centros
clus <- kmeans(dataKmeans,centers = 9)
sil8 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 9 centros
clus <- kmeans(dataKmeans,centers = 10)
sil9 <- mean(silhouette(clus$cluster,dmatrix = distancia^2)[,3]) # Silhouette com 10 centros
dataSil <- data.frame(centros = c(2,3,4,5,6,7,8,9,10),distSil = c(sil1,sil2,sil3,sil4,sil5,sil6,sil7,sil8,sil9)) # dataframe dos silhouettes relacionando centrosxsilhouette
dataSil %>% ggplot(aes(x = centros,y = distSil)) + geom_line() # plotando o gráfico
clus <- kmeans(dataKmeans,centers = 2) # kmeans com 2 centros
clus$centers # Verificando os centros
table(clus$cluster) # Vendo quantos pontos estão em cada grupo
clusplot(dataKmeans,clus$cluster,color = T,shade = T) # plotando o gráfico do kmeans
clus <- kmeans(dataKmeans,centers = 3) # kmeans com 2 centros
clus$centers # Verificando os centros
table(clus$cluster) # Vendo quantos pontos estão em cada grupo
clusplot(dataKmeans,clus$cluster,color = T,shade = T) # plotando o gráfico do kmeans
